name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install

      - name: Build packages
        run: bun run build:all

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: bun changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Check if server package was published
        if: steps.changesets.outputs.published == 'true'
        id: check_server
        run: |
          # Parse the published packages JSON
          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'

          # Debug output to see format
          echo "Published packages: $PUBLISHED_PACKAGES"

          # Check if @laplace.live/event-bridge-server is in the published packages
          if echo "$PUBLISHED_PACKAGES" | grep -q "@laplace.live/event-bridge-server"; then
            echo "Server package was published"
            echo "server_published=true" >> $GITHUB_OUTPUT
          else
            echo "Server package was not published"
            echo "server_published=false" >> $GITHUB_OUTPUT
          fi

          # Get the version of the server package if it was published
          if echo "$PUBLISHED_PACKAGES" | grep -q "@laplace.live/event-bridge-server"; then
            # Try different formats based on changesets output format
            if echo "$PUBLISHED_PACKAGES" | jq -e . >/dev/null 2>&1; then
              # JSON format
              VERSION=$(echo "$PUBLISHED_PACKAGES" | jq -r '.[] | select(.name=="@laplace.live/event-bridge-server") | .version')
            else
              # String format
              VERSION=$(echo "$PUBLISHED_PACKAGES" | grep -o '"@laplace.live/event-bridge-server":[^,}]*' | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
            fi

            echo "Server version: $VERSION"
            echo "server_version=$VERSION" >> $GITHUB_OUTPUT

            # Full tag with package name
            FULL_TAG="@laplace.live/event-bridge-server@$VERSION"
            echo "server_tag=$FULL_TAG" >> $GITHUB_OUTPUT

            # Simple version tag (e.g. v1.2.3)
            SIMPLE_TAG="v$VERSION"
            echo "simple_tag=$SIMPLE_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Build Workflow
        if: steps.check_server.outputs.server_published == 'true'
        uses: peter-evans/repository-dispatch@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: release-created
          client-payload: '{"package": "@laplace.live/event-bridge-server", "version": "${{ steps.check_server.outputs.server_version }}", "tag": "${{ steps.check_server.outputs.server_tag }}", "simple_tag": "${{ steps.check_server.outputs.simple_tag }}"}'
